
OARLFR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000260  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000302  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001de  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
 ADCSRA = ADCSRA| (0b00000001<<ADEN);
  6c:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA = ADCSRA |(0b00000001<<ADPS2);
  6e:	32 9a       	sbi	0x06, 2	; 6
 ADMUX = ADMUX | (0b00000001<< REFS0);
  70:	3e 9a       	sbi	0x07, 6	; 7
 }
  72:	08 95       	ret

00000074 <read_adc>:
 
unsigned int read_adc()
{
  int p = 0b00000000;
  ADMUX = ADMUX | p;
  74:	87 b1       	in	r24, 0x07	; 7
  76:	87 b9       	out	0x07, r24	; 7
  ADCSRA = ADCSRA | (0b00000001<<ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
  while((ADCSRA &(0b00000001<<ADIF)) ==0)
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <read_adc+0x6>
  {}
  ADCSRA = ADCSRA | (0b00000001<<ADIF);
  7e:	34 9a       	sbi	0x06, 4	; 6
  return(ADC);
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
  } void main()
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:
  {
  88:	3f 92       	push	r3
  8a:	4f 92       	push	r4
  8c:	5f 92       	push	r5
  8e:	6f 92       	push	r6
  90:	7f 92       	push	r7
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
   DDRB=0b11111111;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
   init_adc();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
  b2:	88 e8       	ldi	r24, 0x88	; 136
  b4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	29 e1       	ldi	r18, 0x19	; 25
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x32>
   unsigned int b;
   
   unsigned int T;
   unsigned int TON;
   unsigned int TOFF;
   DDRD=0b00000000;
  c4:	11 ba       	out	0x11, r1	; 17
   PORTD=0b11111111;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	82 bb       	out	0x12, r24	; 18
  int q;
  while(1)
 { q=PIND;
  if(q==0b11111100) // white surface and robot moving forward
    PORTB=0b00001010;
  ca:	5a e0       	ldi	r21, 0x0A	; 10
  cc:	75 2e       	mov	r7, r21
  if(q==0b11111110) // leftturn
    PORTB=0b00000110;
  if(q==0b11111101) //right turn
    PORTB=0b00001001;
  if(q==0b11111111)  // black surface , beep anf go forward
    PORTB=0b00011010;
  ce:	4a e1       	ldi	r20, 0x1A	; 26
  d0:	44 2e       	mov	r4, r20
  if(q==0b11111100) // white surface and robot moving forward
    PORTB=0b00001010;
  if(q==0b11111110) // leftturn
    PORTB=0b00000110;
  if(q==0b11111101) //right turn
    PORTB=0b00001001;
  d2:	39 e0       	ldi	r19, 0x09	; 9
  d4:	33 2e       	mov	r3, r19
  while(1)
 { q=PIND;
  if(q==0b11111100) // white surface and robot moving forward
    PORTB=0b00001010;
  if(q==0b11111110) // leftturn
    PORTB=0b00000110;
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	52 2e       	mov	r5, r18
  if(q==0b11111101) //right turn
    PORTB=0b00001001;
  if(q==0b11111111)  // black surface , beep anf go forward
    PORTB=0b00011010;
  if(q==0b11111000) // object in front
     PORTB=0b00010000;
  da:	90 e1       	ldi	r25, 0x10	; 16
  dc:	69 2e       	mov	r6, r25
	TOFF =a;
	TON = T - TOFF;
      if(b  <=870) //thsi value has to be changed according to the speed required
       {
         PORTB = 0b00001010;
	     _delay_ms(TON);
  de:	89 e1       	ldi	r24, 0x19	; 25
  e0:	88 2e       	mov	r8, r24
  e2:	91 2c       	mov	r9, r1
   unsigned int TOFF;
   DDRD=0b00000000;
   PORTD=0b11111111;
  int q;
  while(1)
 { q=PIND;
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	90 e0       	ldi	r25, 0x00	; 0
  if(q==0b11111100) // white surface and robot moving forward
  e8:	8c 3f       	cpi	r24, 0xFC	; 252
  ea:	91 05       	cpc	r25, r1
  ec:	11 f4       	brne	.+4      	; 0xf2 <main+0x6a>
    PORTB=0b00001010;
  ee:	78 ba       	out	0x18, r7	; 24
  f0:	0f c0       	rjmp	.+30     	; 0x110 <main+0x88>
  if(q==0b11111110) // leftturn
  f2:	8e 3f       	cpi	r24, 0xFE	; 254
  f4:	91 05       	cpc	r25, r1
  f6:	11 f4       	brne	.+4      	; 0xfc <main+0x74>
    PORTB=0b00000110;
  f8:	58 ba       	out	0x18, r5	; 24
  fa:	0f c0       	rjmp	.+30     	; 0x11a <main+0x92>
  if(q==0b11111101) //right turn
  fc:	8d 3f       	cpi	r24, 0xFD	; 253
  fe:	91 05       	cpc	r25, r1
 100:	11 f4       	brne	.+4      	; 0x106 <main+0x7e>
    PORTB=0b00001001;
 102:	38 ba       	out	0x18, r3	; 24
 104:	ef cf       	rjmp	.-34     	; 0xe4 <main+0x5c>
  if(q==0b11111111)  // black surface , beep anf go forward
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	91 05       	cpc	r25, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <main+0x88>
    PORTB=0b00011010;
 10c:	48 ba       	out	0x18, r4	; 24
 10e:	ea cf       	rjmp	.-44     	; 0xe4 <main+0x5c>
  if(q==0b11111000) // object in front
 110:	88 3f       	cpi	r24, 0xF8	; 248
 112:	91 05       	cpc	r25, r1
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x92>
     PORTB=0b00010000;
 116:	68 ba       	out	0x18, r6	; 24
 118:	e5 cf       	rjmp	.-54     	; 0xe4 <main+0x5c>
  if(q ==0b11110100) // wall sensor
 11a:	84 3f       	cpi	r24, 0xF4	; 244
 11c:	91 05       	cpc	r25, r1
 11e:	11 f7       	brne	.-60     	; 0xe4 <main+0x5c>
    {  PORTB=0b00001010;// potentiometer getting supply
 120:	78 ba       	out	0x18, r7	; 24
  
  
  
  if (q ==0b11110111)
     { PORTB = 0b00011010; }
     b=read_adc();
 122:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
 126:	9c 01       	movw	r18, r24
	a=(b/40);
 128:	68 e2       	ldi	r22, 0x28	; 40
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__udivmodhi4>
 130:	eb 01       	movw	r28, r22
	T = 25.6;
	TOFF =a;
	TON = T - TOFF;
      if(b  <=870) //thsi value has to be changed according to the speed required
 132:	27 56       	subi	r18, 0x67	; 103
 134:	33 40       	sbci	r19, 0x03	; 3
 136:	b0 f6       	brcc	.-84     	; 0xe4 <main+0x5c>
       {
         PORTB = 0b00001010;
 138:	78 ba       	out	0x18, r7	; 24
	     _delay_ms(TON);
 13a:	b4 01       	movw	r22, r8
 13c:	6c 1b       	sub	r22, r28
 13e:	7d 0b       	sbc	r23, r29
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 4f 01 	call	0x29e	; 0x29e <__floatunsisf>
 148:	5b 01       	movw	r10, r22
 14a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4a e7       	ldi	r20, 0x7A	; 122
 152:	53 e4       	ldi	r21, 0x43	; 67
 154:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__mulsf3>
 158:	7b 01       	movw	r14, r22
 15a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	5f e3       	ldi	r21, 0x3F	; 63
 164:	0e 94 1f 01 	call	0x23e	; 0x23e <__cmpsf2>
 168:	88 23       	and	r24, r24
 16a:	1c f4       	brge	.+6      	; 0x172 <main+0xea>
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	22 c0       	rjmp	.+68     	; 0x1b6 <main+0x12e>
		__ticks = 1;
	else if (__tmp > 65535)
 172:	c8 01       	movw	r24, r16
 174:	b7 01       	movw	r22, r14
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	4f e7       	ldi	r20, 0x7F	; 127
 17c:	57 e4       	ldi	r21, 0x47	; 71
 17e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__gesf2>
 182:	18 16       	cp	r1, r24
 184:	a4 f4       	brge	.+40     	; 0x1ae <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 186:	c6 01       	movw	r24, r12
 188:	b5 01       	movw	r22, r10
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e2       	ldi	r20, 0x20	; 32
 190:	51 e4       	ldi	r21, 0x41	; 65
 192:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__mulsf3>
 196:	0e 94 23 01 	call	0x246	; 0x246 <__fixunssfsi>
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <main+0x11e>
 19c:	c4 01       	movw	r24, r8
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x116>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	61 50       	subi	r22, 0x01	; 1
 1a4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	61 15       	cp	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	c1 f7       	brne	.-16     	; 0x19c <main+0x114>
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ae:	c8 01       	movw	r24, r16
 1b0:	b7 01       	movw	r22, r14
 1b2:	0e 94 23 01 	call	0x246	; 0x246 <__fixunssfsi>
 1b6:	cb 01       	movw	r24, r22
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x130>
	     PORTB =0b00000000;
 1bc:	18 ba       	out	0x18, r1	; 24
	     _delay_ms(TOFF);
 1be:	be 01       	movw	r22, r28
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 4f 01 	call	0x29e	; 0x29e <__floatunsisf>
 1c8:	5b 01       	movw	r10, r22
 1ca:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	4a e7       	ldi	r20, 0x7A	; 122
 1d2:	53 e4       	ldi	r21, 0x43	; 67
 1d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__mulsf3>
 1d8:	7b 01       	movw	r14, r22
 1da:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	0e 94 1f 01 	call	0x23e	; 0x23e <__cmpsf2>
 1e8:	88 23       	and	r24, r24
 1ea:	1c f4       	brge	.+6      	; 0x1f2 <main+0x16a>
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	22 c0       	rjmp	.+68     	; 0x236 <main+0x1ae>
		__ticks = 1;
	else if (__tmp > 65535)
 1f2:	c8 01       	movw	r24, r16
 1f4:	b7 01       	movw	r22, r14
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	3f ef       	ldi	r19, 0xFF	; 255
 1fa:	4f e7       	ldi	r20, 0x7F	; 127
 1fc:	57 e4       	ldi	r21, 0x47	; 71
 1fe:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	a4 f4       	brge	.+40     	; 0x22e <main+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 206:	c6 01       	movw	r24, r12
 208:	b5 01       	movw	r22, r10
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e2       	ldi	r20, 0x20	; 32
 210:	51 e4       	ldi	r21, 0x41	; 65
 212:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__mulsf3>
 216:	0e 94 23 01 	call	0x246	; 0x246 <__fixunssfsi>
 21a:	05 c0       	rjmp	.+10     	; 0x226 <main+0x19e>
 21c:	c4 01       	movw	r24, r8
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x196>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	61 50       	subi	r22, 0x01	; 1
 224:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	c1 f7       	brne	.-16     	; 0x21c <main+0x194>
 22c:	5b cf       	rjmp	.-330    	; 0xe4 <main+0x5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 22e:	c8 01       	movw	r24, r16
 230:	b7 01       	movw	r22, r14
 232:	0e 94 23 01 	call	0x246	; 0x246 <__fixunssfsi>
 236:	cb 01       	movw	r24, r22
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x1b0>
 23c:	53 cf       	rjmp	.-346    	; 0xe4 <main+0x5c>

0000023e <__cmpsf2>:
 23e:	6c d0       	rcall	.+216    	; 0x318 <__fp_cmp>
 240:	08 f4       	brcc	.+2      	; 0x244 <__cmpsf2+0x6>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	08 95       	ret

00000246 <__fixunssfsi>:
 246:	94 d0       	rcall	.+296    	; 0x370 <__fp_splitA>
 248:	88 f0       	brcs	.+34     	; 0x26c <__fixunssfsi+0x26>
 24a:	9f 57       	subi	r25, 0x7F	; 127
 24c:	90 f0       	brcs	.+36     	; 0x272 <__fixunssfsi+0x2c>
 24e:	b9 2f       	mov	r27, r25
 250:	99 27       	eor	r25, r25
 252:	b7 51       	subi	r27, 0x17	; 23
 254:	a0 f0       	brcs	.+40     	; 0x27e <__fixunssfsi+0x38>
 256:	d1 f0       	breq	.+52     	; 0x28c <__fixunssfsi+0x46>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	1a f0       	brmi	.+6      	; 0x268 <__fixunssfsi+0x22>
 262:	ba 95       	dec	r27
 264:	c9 f7       	brne	.-14     	; 0x258 <__fixunssfsi+0x12>
 266:	12 c0       	rjmp	.+36     	; 0x28c <__fixunssfsi+0x46>
 268:	b1 30       	cpi	r27, 0x01	; 1
 26a:	81 f0       	breq	.+32     	; 0x28c <__fixunssfsi+0x46>
 26c:	9b d0       	rcall	.+310    	; 0x3a4 <__fp_zero>
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	08 95       	ret
 272:	98 c0       	rjmp	.+304    	; 0x3a4 <__fp_zero>
 274:	67 2f       	mov	r22, r23
 276:	78 2f       	mov	r23, r24
 278:	88 27       	eor	r24, r24
 27a:	b8 5f       	subi	r27, 0xF8	; 248
 27c:	39 f0       	breq	.+14     	; 0x28c <__fixunssfsi+0x46>
 27e:	b9 3f       	cpi	r27, 0xF9	; 249
 280:	cc f3       	brlt	.-14     	; 0x274 <__fixunssfsi+0x2e>
 282:	86 95       	lsr	r24
 284:	77 95       	ror	r23
 286:	67 95       	ror	r22
 288:	b3 95       	inc	r27
 28a:	d9 f7       	brne	.-10     	; 0x282 <__fixunssfsi+0x3c>
 28c:	3e f4       	brtc	.+14     	; 0x29c <__fixunssfsi+0x56>
 28e:	90 95       	com	r25
 290:	80 95       	com	r24
 292:	70 95       	com	r23
 294:	61 95       	neg	r22
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	8f 4f       	sbci	r24, 0xFF	; 255
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__floatunsisf>:
 29e:	e8 94       	clt
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <__floatsisf+0x12>

000002a2 <__floatsisf>:
 2a2:	97 fb       	bst	r25, 7
 2a4:	3e f4       	brtc	.+14     	; 0x2b4 <__floatsisf+0x12>
 2a6:	90 95       	com	r25
 2a8:	80 95       	com	r24
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	8f 4f       	sbci	r24, 0xFF	; 255
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	99 23       	and	r25, r25
 2b6:	a9 f0       	breq	.+42     	; 0x2e2 <__floatsisf+0x40>
 2b8:	f9 2f       	mov	r31, r25
 2ba:	96 e9       	ldi	r25, 0x96	; 150
 2bc:	bb 27       	eor	r27, r27
 2be:	93 95       	inc	r25
 2c0:	f6 95       	lsr	r31
 2c2:	87 95       	ror	r24
 2c4:	77 95       	ror	r23
 2c6:	67 95       	ror	r22
 2c8:	b7 95       	ror	r27
 2ca:	f1 11       	cpse	r31, r1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <__floatsisf+0x1c>
 2ce:	fa f4       	brpl	.+62     	; 0x30e <__floatsisf+0x6c>
 2d0:	bb 0f       	add	r27, r27
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <__floatsisf+0x36>
 2d4:	60 ff       	sbrs	r22, 0
 2d6:	1b c0       	rjmp	.+54     	; 0x30e <__floatsisf+0x6c>
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	16 c0       	rjmp	.+44     	; 0x30e <__floatsisf+0x6c>
 2e2:	88 23       	and	r24, r24
 2e4:	11 f0       	breq	.+4      	; 0x2ea <__floatsisf+0x48>
 2e6:	96 e9       	ldi	r25, 0x96	; 150
 2e8:	11 c0       	rjmp	.+34     	; 0x30c <__floatsisf+0x6a>
 2ea:	77 23       	and	r23, r23
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <__floatsisf+0x54>
 2ee:	9e e8       	ldi	r25, 0x8E	; 142
 2f0:	87 2f       	mov	r24, r23
 2f2:	76 2f       	mov	r23, r22
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <__floatsisf+0x5e>
 2f6:	66 23       	and	r22, r22
 2f8:	71 f0       	breq	.+28     	; 0x316 <__floatsisf+0x74>
 2fa:	96 e8       	ldi	r25, 0x86	; 134
 2fc:	86 2f       	mov	r24, r22
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	2a f0       	brmi	.+10     	; 0x30e <__floatsisf+0x6c>
 304:	9a 95       	dec	r25
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	88 1f       	adc	r24, r24
 30c:	da f7       	brpl	.-10     	; 0x304 <__floatsisf+0x62>
 30e:	88 0f       	add	r24, r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	97 f9       	bld	r25, 7
 316:	08 95       	ret

00000318 <__fp_cmp>:
 318:	99 0f       	add	r25, r25
 31a:	00 08       	sbc	r0, r0
 31c:	55 0f       	add	r21, r21
 31e:	aa 0b       	sbc	r26, r26
 320:	e0 e8       	ldi	r30, 0x80	; 128
 322:	fe ef       	ldi	r31, 0xFE	; 254
 324:	16 16       	cp	r1, r22
 326:	17 06       	cpc	r1, r23
 328:	e8 07       	cpc	r30, r24
 32a:	f9 07       	cpc	r31, r25
 32c:	c0 f0       	brcs	.+48     	; 0x35e <__fp_cmp+0x46>
 32e:	12 16       	cp	r1, r18
 330:	13 06       	cpc	r1, r19
 332:	e4 07       	cpc	r30, r20
 334:	f5 07       	cpc	r31, r21
 336:	98 f0       	brcs	.+38     	; 0x35e <__fp_cmp+0x46>
 338:	62 1b       	sub	r22, r18
 33a:	73 0b       	sbc	r23, r19
 33c:	84 0b       	sbc	r24, r20
 33e:	95 0b       	sbc	r25, r21
 340:	39 f4       	brne	.+14     	; 0x350 <__fp_cmp+0x38>
 342:	0a 26       	eor	r0, r26
 344:	61 f0       	breq	.+24     	; 0x35e <__fp_cmp+0x46>
 346:	23 2b       	or	r18, r19
 348:	24 2b       	or	r18, r20
 34a:	25 2b       	or	r18, r21
 34c:	21 f4       	brne	.+8      	; 0x356 <__fp_cmp+0x3e>
 34e:	08 95       	ret
 350:	0a 26       	eor	r0, r26
 352:	09 f4       	brne	.+2      	; 0x356 <__fp_cmp+0x3e>
 354:	a1 40       	sbci	r26, 0x01	; 1
 356:	a6 95       	lsr	r26
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	81 1d       	adc	r24, r1
 35c:	81 1d       	adc	r24, r1
 35e:	08 95       	ret

00000360 <__fp_split3>:
 360:	57 fd       	sbrc	r21, 7
 362:	90 58       	subi	r25, 0x80	; 128
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	59 f0       	breq	.+22     	; 0x380 <__fp_splitA+0x10>
 36a:	5f 3f       	cpi	r21, 0xFF	; 255
 36c:	71 f0       	breq	.+28     	; 0x38a <__fp_splitA+0x1a>
 36e:	47 95       	ror	r20

00000370 <__fp_splitA>:
 370:	88 0f       	add	r24, r24
 372:	97 fb       	bst	r25, 7
 374:	99 1f       	adc	r25, r25
 376:	61 f0       	breq	.+24     	; 0x390 <__fp_splitA+0x20>
 378:	9f 3f       	cpi	r25, 0xFF	; 255
 37a:	79 f0       	breq	.+30     	; 0x39a <__fp_splitA+0x2a>
 37c:	87 95       	ror	r24
 37e:	08 95       	ret
 380:	12 16       	cp	r1, r18
 382:	13 06       	cpc	r1, r19
 384:	14 06       	cpc	r1, r20
 386:	55 1f       	adc	r21, r21
 388:	f2 cf       	rjmp	.-28     	; 0x36e <__fp_split3+0xe>
 38a:	46 95       	lsr	r20
 38c:	f1 df       	rcall	.-30     	; 0x370 <__fp_splitA>
 38e:	08 c0       	rjmp	.+16     	; 0x3a0 <__fp_splitA+0x30>
 390:	16 16       	cp	r1, r22
 392:	17 06       	cpc	r1, r23
 394:	18 06       	cpc	r1, r24
 396:	99 1f       	adc	r25, r25
 398:	f1 cf       	rjmp	.-30     	; 0x37c <__fp_splitA+0xc>
 39a:	86 95       	lsr	r24
 39c:	71 05       	cpc	r23, r1
 39e:	61 05       	cpc	r22, r1
 3a0:	08 94       	sec
 3a2:	08 95       	ret

000003a4 <__fp_zero>:
 3a4:	e8 94       	clt

000003a6 <__fp_szero>:
 3a6:	bb 27       	eor	r27, r27
 3a8:	66 27       	eor	r22, r22
 3aa:	77 27       	eor	r23, r23
 3ac:	cb 01       	movw	r24, r22
 3ae:	97 f9       	bld	r25, 7
 3b0:	08 95       	ret

000003b2 <__gesf2>:
 3b2:	b2 df       	rcall	.-156    	; 0x318 <__fp_cmp>
 3b4:	08 f4       	brcc	.+2      	; 0x3b8 <__gesf2+0x6>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__mulsf3>:
 3ba:	0b d0       	rcall	.+22     	; 0x3d2 <__mulsf3x>
 3bc:	78 c0       	rjmp	.+240    	; 0x4ae <__fp_round>
 3be:	69 d0       	rcall	.+210    	; 0x492 <__fp_pscA>
 3c0:	28 f0       	brcs	.+10     	; 0x3cc <__mulsf3+0x12>
 3c2:	6e d0       	rcall	.+220    	; 0x4a0 <__fp_pscB>
 3c4:	18 f0       	brcs	.+6      	; 0x3cc <__mulsf3+0x12>
 3c6:	95 23       	and	r25, r21
 3c8:	09 f0       	breq	.+2      	; 0x3cc <__mulsf3+0x12>
 3ca:	5a c0       	rjmp	.+180    	; 0x480 <__fp_inf>
 3cc:	5f c0       	rjmp	.+190    	; 0x48c <__fp_nan>
 3ce:	11 24       	eor	r1, r1
 3d0:	ea cf       	rjmp	.-44     	; 0x3a6 <__fp_szero>

000003d2 <__mulsf3x>:
 3d2:	c6 df       	rcall	.-116    	; 0x360 <__fp_split3>
 3d4:	a0 f3       	brcs	.-24     	; 0x3be <__mulsf3+0x4>

000003d6 <__mulsf3_pse>:
 3d6:	95 9f       	mul	r25, r21
 3d8:	d1 f3       	breq	.-12     	; 0x3ce <__mulsf3+0x14>
 3da:	95 0f       	add	r25, r21
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	55 1f       	adc	r21, r21
 3e0:	62 9f       	mul	r22, r18
 3e2:	f0 01       	movw	r30, r0
 3e4:	72 9f       	mul	r23, r18
 3e6:	bb 27       	eor	r27, r27
 3e8:	f0 0d       	add	r31, r0
 3ea:	b1 1d       	adc	r27, r1
 3ec:	63 9f       	mul	r22, r19
 3ee:	aa 27       	eor	r26, r26
 3f0:	f0 0d       	add	r31, r0
 3f2:	b1 1d       	adc	r27, r1
 3f4:	aa 1f       	adc	r26, r26
 3f6:	64 9f       	mul	r22, r20
 3f8:	66 27       	eor	r22, r22
 3fa:	b0 0d       	add	r27, r0
 3fc:	a1 1d       	adc	r26, r1
 3fe:	66 1f       	adc	r22, r22
 400:	82 9f       	mul	r24, r18
 402:	22 27       	eor	r18, r18
 404:	b0 0d       	add	r27, r0
 406:	a1 1d       	adc	r26, r1
 408:	62 1f       	adc	r22, r18
 40a:	73 9f       	mul	r23, r19
 40c:	b0 0d       	add	r27, r0
 40e:	a1 1d       	adc	r26, r1
 410:	62 1f       	adc	r22, r18
 412:	83 9f       	mul	r24, r19
 414:	a0 0d       	add	r26, r0
 416:	61 1d       	adc	r22, r1
 418:	22 1f       	adc	r18, r18
 41a:	74 9f       	mul	r23, r20
 41c:	33 27       	eor	r19, r19
 41e:	a0 0d       	add	r26, r0
 420:	61 1d       	adc	r22, r1
 422:	23 1f       	adc	r18, r19
 424:	84 9f       	mul	r24, r20
 426:	60 0d       	add	r22, r0
 428:	21 1d       	adc	r18, r1
 42a:	82 2f       	mov	r24, r18
 42c:	76 2f       	mov	r23, r22
 42e:	6a 2f       	mov	r22, r26
 430:	11 24       	eor	r1, r1
 432:	9f 57       	subi	r25, 0x7F	; 127
 434:	50 40       	sbci	r21, 0x00	; 0
 436:	8a f0       	brmi	.+34     	; 0x45a <__mulsf3_pse+0x84>
 438:	e1 f0       	breq	.+56     	; 0x472 <__stack+0x13>
 43a:	88 23       	and	r24, r24
 43c:	4a f0       	brmi	.+18     	; 0x450 <__mulsf3_pse+0x7a>
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	bb 1f       	adc	r27, r27
 444:	66 1f       	adc	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	50 40       	sbci	r21, 0x00	; 0
 44e:	a9 f7       	brne	.-22     	; 0x43a <__mulsf3_pse+0x64>
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	51 05       	cpc	r21, r1
 454:	70 f0       	brcs	.+28     	; 0x472 <__stack+0x13>
 456:	14 c0       	rjmp	.+40     	; 0x480 <__fp_inf>
 458:	a6 cf       	rjmp	.-180    	; 0x3a6 <__fp_szero>
 45a:	5f 3f       	cpi	r21, 0xFF	; 255
 45c:	ec f3       	brlt	.-6      	; 0x458 <__mulsf3_pse+0x82>
 45e:	98 3e       	cpi	r25, 0xE8	; 232
 460:	dc f3       	brlt	.-10     	; 0x458 <__mulsf3_pse+0x82>
 462:	86 95       	lsr	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b7 95       	ror	r27
 46a:	f7 95       	ror	r31
 46c:	e7 95       	ror	r30
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	c1 f7       	brne	.-16     	; 0x462 <__stack+0x3>
 472:	fe 2b       	or	r31, r30
 474:	88 0f       	add	r24, r24
 476:	91 1d       	adc	r25, r1
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	97 f9       	bld	r25, 7
 47e:	08 95       	ret

00000480 <__fp_inf>:
 480:	97 f9       	bld	r25, 7
 482:	9f 67       	ori	r25, 0x7F	; 127
 484:	80 e8       	ldi	r24, 0x80	; 128
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	08 95       	ret

0000048c <__fp_nan>:
 48c:	9f ef       	ldi	r25, 0xFF	; 255
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	08 95       	ret

00000492 <__fp_pscA>:
 492:	00 24       	eor	r0, r0
 494:	0a 94       	dec	r0
 496:	16 16       	cp	r1, r22
 498:	17 06       	cpc	r1, r23
 49a:	18 06       	cpc	r1, r24
 49c:	09 06       	cpc	r0, r25
 49e:	08 95       	ret

000004a0 <__fp_pscB>:
 4a0:	00 24       	eor	r0, r0
 4a2:	0a 94       	dec	r0
 4a4:	12 16       	cp	r1, r18
 4a6:	13 06       	cpc	r1, r19
 4a8:	14 06       	cpc	r1, r20
 4aa:	05 06       	cpc	r0, r21
 4ac:	08 95       	ret

000004ae <__fp_round>:
 4ae:	09 2e       	mov	r0, r25
 4b0:	03 94       	inc	r0
 4b2:	00 0c       	add	r0, r0
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0xc>
 4b6:	88 23       	and	r24, r24
 4b8:	52 f0       	brmi	.+20     	; 0x4ce <__fp_round+0x20>
 4ba:	bb 0f       	add	r27, r27
 4bc:	40 f4       	brcc	.+16     	; 0x4ce <__fp_round+0x20>
 4be:	bf 2b       	or	r27, r31
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__fp_round+0x18>
 4c2:	60 ff       	sbrs	r22, 0
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__fp_round+0x20>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	08 95       	ret

000004d0 <__udivmodhi4>:
 4d0:	aa 1b       	sub	r26, r26
 4d2:	bb 1b       	sub	r27, r27
 4d4:	51 e1       	ldi	r21, 0x11	; 17
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__udivmodhi4_ep>

000004d8 <__udivmodhi4_loop>:
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	a6 17       	cp	r26, r22
 4de:	b7 07       	cpc	r27, r23
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__udivmodhi4_ep>
 4e2:	a6 1b       	sub	r26, r22
 4e4:	b7 0b       	sbc	r27, r23

000004e6 <__udivmodhi4_ep>:
 4e6:	88 1f       	adc	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	5a 95       	dec	r21
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__udivmodhi4_loop>
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
